{"version":3,"sources":["../../server/middlewares/isAuth.js"],"names":["require","config","redis","jwt","checkToken","req","res","next","token","headers","startsWith","slice","length","verify","process","env","JWT_SECRET","err","decoded","console","log","status","json","success","message","checkCache","val","error","callback","port_redis","PORT","redis_client","createClient","get","module","exports"],"mappings":"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","sourcesContent":["require('dotenv').config();\nconst redis = require('redis')\nlet jwt = require('jsonwebtoken');\n\nfunction checkToken (req, res, next) {\n  let token = req.headers['x-access-token'] || req.headers['authorization']; // Express headers are auto converted to lowercase\n  if (token.startsWith('Bearer ')) {\n    // Remove Bearer from string\n    token = token.slice(7, token.length);\n  }\n\n\n  if (token) {\n    jwt.verify(token, process.env.JWT_SECRET, function (err, decoded) {\n      if (err) {\n        console.log(err)\n        return res.status(302).json({\n          success: false,\n          message: 'Token is not valid'\n        });\n      } else {\n        try {\n          checkCache(token, (err, val) => {\n            // console.log(val)\n            if (err) {\n              return res.status(500).json({\n                success: false,\n                message: 'Server error!'\n              });\n            } else if (val != null) {\n              return res.status(400).json({\n                success: false,\n                message: 'Token is outdated!'\n              });\n            } \n            req.decoded = decoded;\n            req.token = token\n            return next();\n          })\n        } catch(error) {\n          console.log(error)\n          return res.status(500).json({\n            success: false,\n            message: 'Server error'\n          });\n        }\n\n      }\n    });\n  } else {\n    return res.status(302).json({\n      success: false,\n      message: 'Auth token is not supplied'\n    });\n  }\n};\n\nfunction checkCache(token, callback) {\n  // check if token in redis cache\n  try {\n    const port_redis = process.env.PORT || 6379;\n    const redis_client = redis.createClient(port_redis);\n    redis_client.get(token, (err, val) => {\n      console.log(val)\n      callback(err, val)\n    })\n  } catch (error) {\n    console.log(error)\n    callback(true)\n  }\n}\n\nmodule.exports = {\n  checkToken: checkToken\n}"],"file":"isAuth.js"}
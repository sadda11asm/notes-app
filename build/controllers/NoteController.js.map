{"version":3,"sources":["../../server/controllers/NoteController.js"],"names":["util","Util","server_err","NoteController","req","res","username","decoded","NoteService","getNotes","err","is_oper","db_user","setError","message","setSuccess","console","log","send","note_id","getNote","db_note","createLink","link","body","title","text","new_note","createNote","id","params","Number","editNote","updated_note","deleteNote"],"mappings":"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","sourcesContent":["import NoteService from '../services/NoteService';\nimport Util from '../utils/Utils';\n\nconst util = new Util();\nconst server_err = \"Server Error\"\n\n\nclass NoteController {\n  static async getNotes(req, res) {\n    try {\n      const username = req.decoded.username;\n      await NoteService.getNotes(username, function (err, is_oper, db_user) {\n        if (err) {\n          if (is_oper) {\n            util.setError(400, err.message)\n          } else {\n            util.setError(500, server_err)\n          }\n        } else {\n          util.setSuccess(200, 'Notes are succesfully fetched!', db_user);\n        }\n      });\n    } catch (error) {\n      console.log(error)\n      util.setError(500, server_err);\n    }\n    return util.send(res);\n  }\n\n  static async getNote(req, res) {\n    try {\n      const note_id = req.decoded.note_id;\n      await NoteService.getNote(note_id, function (err, is_oper, db_note) {\n        if (err) {\n          if (is_oper) {\n            util.setError(400, err.message)\n          } else {\n            util.setError(500, server_err)\n          }\n        } else {\n          util.setSuccess(201, 'Note is succesfully fetched!', db_note);\n        }\n      });\n    } catch (error) {\n      console.log(error)\n      util.setError(500, server_err);\n    }\n    return util.send(res);\n  }\n\n  static async createLink(req, res) {\n    try {\n      await NoteService.createLink(req, function (err, is_oper, link) {\n        if (err) {\n          if (is_oper) {\n            util.setError(400, err.message)\n          } else {\n            util.setError(500, server_err)\n          }\n        } else {\n          util.setSuccess(201, 'Note is succesfully fetched!', link);\n        }\n      });\n    } catch (error) {\n      console.log(error)\n      util.setError(500, server_err);\n    }\n    return util.send(res);\n  }\n\n  static async createNote(req, res) {\n    console.log(req)\n    if (!req.body.title || !req.body.text) {\n      util.setError(400, 'Please provide complete details');\n      return util.send(res);\n    }\n    let new_note = req.body;\n    new_note.username = req.decoded.username\n    try {\n      await NoteService.createNote(new_note, function (err, is_oper, db_user) {\n        if (err) {\n          if (is_oper) {\n            util.setError(400, err.message)\n          } else {\n            util.setError(500, server_err)\n          }\n        } else {\n          util.setSuccess(201, 'Note Created!', db_user);\n        }\n      });\n    } catch (error) {\n      console.log(error)\n      util.setError(500, server_err);\n    }\n    return util.send(res);\n  }\n\n  static async editNote(req, res) {\n    const new_note = req.body;\n    const { id } = req.params;\n    const username = req.decoded.username;\n    if (!Number(id)) {\n      util.setError(400, 'Please input a valid id of a note!');\n      return util.send(res);\n    }\n    try {\n      await NoteService.editNote(username, id, new_note, function (err, is_oper, updated_note) {\n        if (err) {\n          if (is_oper) {\n            util.setError(400, err.message)\n          } else {\n            util.setError(500, server_err)\n          }\n        } else {\n          util.setSuccess(201, 'Note Updated!', updated_note);\n        }\n      });\n    } catch (error) {\n      console.log(error)\n      util.setError(500, server_err);\n    }\n    return util.send(res)\n  }\n\n  static async deleteNote(req, res) {\n    const { id } = req.params;\n    const username = req.decoded.username;\n    if (!Number(id)) {\n      util.setError(400, 'Please input a valid id of a note!');\n      return util.send(res);\n    }\n    try {\n      await NoteService.deleteNote(username, id, function (err, is_oper) {\n        if (err) {\n          if (is_oper) {\n            util.setError(400, err.message)\n          } else {\n            util.setError(500, server_err)\n          }\n        } else {\n          util.setSuccess(201, 'Note Deleted!');\n        }\n      });\n    } catch (error) {\n      console.log(error)\n      util.setError(500, server_err);\n    }\n    return util.send(res)\n  }\n}\n\nexport default NoteController;"],"file":"NoteController.js"}
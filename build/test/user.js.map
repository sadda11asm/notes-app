{"version":3,"sources":["../../server/test/user.js"],"names":["chai","use","chatHttp","expect","describe","it","done","user","username","password","request","app","post","set","send","end","err","res","status","to","equal","body","data","include","user_id","have","keys"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AAEAA,iBAAKC,GAAL,CAASC,oBAAT;;IACQC,M,GAAWH,gB,CAAXG,M;AAERC,QAAQ,CAAC,6BAAD,EAAgC,YAAM;AAC1CC,EAAAA,EAAE,CAAC,yBAAD,EAA4B,UAACC,IAAD,EAAU;AACtC,QAAMC,IAAI,GAAG;AACXC,MAAAA,QAAQ,EAAE,QADC;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAb;;AAIAT,qBAAKU,OAAL,CAAaC,eAAb,EACGC,IADH,CACQ,kBADR,EAEGC,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGC,IAHH,CAGQP,IAHR,EAIGQ,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASC,IAAV,CAAN,CAAsBH,EAAtB,CAAyBI,OAAzB,CAAiC;AAC/BC,QAAAA,OAAO,EAAE,CADsB;AAE/BhB,QAAAA,QAAQ,EAAED,IAAI,CAACC;AAFgB,OAAjC;AAIAL,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASC,IAAV,CAAN,CAAsBH,EAAtB,CAAyBM,IAAzB,CAA8BC,IAA9B,CAAmC,OAAnC,EAA4C,SAA5C,EAAuD,UAAvD;AACApB,MAAAA,IAAI;AACL,KAZH;AAaD,GAlBC,CAAF,CAD0C,CAqsourcesContent":["import chai from 'chai';\nimport chatHttp from 'chai-http';\nimport 'chai/register-should';\nimport app from '../../app';\n\nchai.use(chatHttp);\nconst { expect } = chai;\n\ndescribe('Testing the user endpoints:', () => {\n    it('It should signup a user', (done) => {\n      const user = {\n        username: 'antoha',\n        password: 'my_pass'\n      };\n      chai.request(app)\n        .post('/api/user/signup')\n        .set('Accept', 'application/json')\n        .send(user)\n        .end((err, res) => {\n          expect(res.status).to.equal(201);\n          expect(res.body.data).to.include({\n            user_id: 1,\n            username: user.username\n          });\n          expect(res.body.data).to.have.keys('token', 'user_id', 'username')\n          done();\n        });\n    });\n  \n    // it('It should not create a book with incomplete parameters', (done) => {\n    //   const book = {\n    //     price: '$9.99',\n    //     description: 'This is the awesome book'\n    //   };\n    //   chai.request(app)\n    //     .post('/api/v1/books')\n    //     .set('Accept', 'application/json')\n    //     .send(book)\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(400);\n    //       done();\n    //     });\n    // });\n  \n    // it('It should get all books', (done) => {\n    //   chai.request(app)\n    //     .get('/api/v1/books')\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(200);\n    //       res.body.data[0].should.have.property('id');\n    //       res.body.data[0].should.have.property('title');\n    //       res.body.data[0].should.have.property('price');\n    //       res.body.data[0].should.have.property('description');\n    //       done();\n    //     });\n    // });\n  \n    // it('It should get a particular book', (done) => {\n    //   const bookId = 1;\n    //   chai.request(app)\n    //     .get(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(200);\n    //       res.body.data.should.have.property('id');\n    //       res.body.data.should.have.property('title');\n    //       res.body.data.should.have.property('price');\n    //       res.body.data.should.have.property('description');\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not get a particular book with invalid id', (done) => {\n    //   const bookId = 8888;\n    //   chai.request(app)\n    //     .get(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(404);\n    //       res.body.should.have.property('message')\n    //                           .eql(`Cannot find book with the id ${bookId}`);\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not get a particular book with non-numeric id', (done) => {\n    //   const bookId = 'aaa';\n    //   chai.request(app)\n    //     .get(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(400);\n    //       res.body.should.have.property('message')\n    //                           .eql('Please input a valid numeric value');\n    //       done();\n    //     });\n    // });\n  \n    // it('It should update a book', (done) => {\n    //   const bookId = 1;\n    //   const updatedBook = {\n    //     id: bookId,\n    //     title: 'Updated Awesome book',\n    //     price: '$10.99',\n    //     description: 'We have updated the price'\n    //   };\n    //   chai.request(app)\n    //     .put(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .send(updatedBook)\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(200);\n    //       expect(res.body.data.id).equal(updatedBook.id);\n    //       expect(res.body.data.title).equal(updatedBook.title);\n    //       expect(res.body.data.price).equal(updatedBook.price);\n    //       expect(res.body.data.description).equal(updatedBook.description);\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not update a book with invalid id', (done) => {\n    //   const bookId = '9999';\n    //   const updatedBook = {\n    //     id: bookId,\n    //     title: 'Updated Awesome book again',\n    //     price: '$11.99',\n    //     description: 'We have updated the price'\n    //   };\n    //   chai.request(app)\n    //     .put(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .send(updatedBook)\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(404);\n    //       res.body.should.have.property('message')\n    //                           .eql(`Cannot find book with the id: ${bookId}`);\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not update a book with non-numeric id value', (done) => {\n    //   const bookId = 'ggg';\n    //   const updatedBook = {\n    //     id: bookId,\n    //     title: 'Updated Awesome book again',\n    //     price: '$11.99',\n    //     description: 'We have updated the price'\n    //   };\n    //   chai.request(app)\n    //     .put(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .send(updatedBook)\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(400);\n    //       res.body.should.have.property('message')\n    //                           .eql('Please input a valid numeric value');\n    //       done();\n    //     });\n    // });\n  \n  \n    // it('It should delete a book', (done) => {\n    //   const bookId = 1;\n    //   chai.request(app)\n    //     .delete(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(200);\n    //       expect(res.body.data).to.include({});\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not delete a book with invalid id', (done) => {\n    //   const bookId = 777;\n    //   chai.request(app)\n    //     .delete(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(404);\n    //       res.body.should.have.property('message')\n    //                           .eql(`Book with the id ${bookId} cannot be found`);\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not delete a book with non-numeric id', (done) => {\n    //   const bookId = 'bbb';\n    //   chai.request(app)\n    //     .delete(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(400);\n    //       res.body.should.have.property('message').eql('Please provide a numeric value');\n    //       done();\n    //     });\n    // });\n  });"],"file":"user.js"}
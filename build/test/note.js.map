{"version":3,"sources":["../../server/test/note.js"],"names":["chai","use","chatHttp","expect","user","username","password","token","before","done","request","app","post","set","send","end","err","res","status","to","equal","body","data","include","user_id","have","keys","note","title","text","describe","it","id","get","be","an","deep","property"],"mappings":"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sB;AAExC,oBAAYD,IAAI,CAACE,IAFuB;AAGxC,kBAAU;AAH8B,OAA5C;AAKAtB,MAAAA,KAAK,GAAGU,GAAG,CAACI,IAAJ,CAASC,IAAT,CAAcf,KAAtB;AACAE,MAAAA,IAAI;AACP,KAfL;AAgBH,GAlBC,CAAF;AAoBAsB,EAAAA,EAAE,CAAC,6CAAD,EAAgD,UAAStB,IAAT,EAAc;AAC5D;AACAT,qBAAKU,OAAL,CAAaC,eAAb,EACKC,IADL,CACU,kBADV,EAEKC,GAFL,CAES,eAFT,mBAEoCN,KAFpC,GAGKO,IAHL,GAIKC,GAJL,CAIS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAX,MAAAA,IAAI;AACP,KAPL;AAQH,GAVC,CAAF;AAYAsB,EAAAA,EAAE,CAAC,iBAAD,EAAoB,UAAStB,IAAT,EAAc;AAChC;AACAT,qBAAKU,OAAL,CAAaC,eAAb,EACKC,IADL,CACU,iBADV,EAEKE,IAFL,CAEUV,IAFV,EAGKW,GAHL,CAGS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASC,IAAV,CAAN,CAAsBH,EAAtB,CAAyBM,IAAzB,CAA8BC,IAA9B,CAAmC,OAAnC,EAA4C,UAA5C;AACAnB,MAAAA,KAAK,GAAGU,GAAG,CAACI,IAAJ,CAASC,IAAT,CAAcf,KAAtB;AACAE,MAAAA,IAAI;AACP,KARL;AASH,GAXC,CAAF,CAnD0C,CA+D1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,CA5MK,CAAR","sourcesContent":["import chai from 'chai';\nimport chatHttp from 'chai-http';\nimport 'chai/register-should';\nimport app from '../../app';\n\n\nchai.use(chatHttp);\nconst { expect } = chai;\n\nconst user = {\n    username: 'antoha-2',\n    password: 'my_pass-2'\n}\n\nlet token = null\nbefore(function(done){\n    chai.request(app)\n        .post('/api/user/signup')\n        .set('Accept', 'application/json')\n        .send(user)\n        .end((err, res) => {\n            expect(res.status).to.equal(201);\n            expect(res.body.data).to.include({\n                user_id: 1,\n                username: user.username\n            });\n            expect(res.body.data).to.have.keys('token', 'user_id', 'username')\n            token = res.body.data.token;\n            done();\n        });\n});\n\nconst note = {\n    title: \"My Diary\",\n    text: \"Should finish test challenge by May 6th\"\n}\n\ndescribe('Testing the note endpoints:', () => {\n    it('It should create a note for the user', (done) => {\n        // console.log(token)\n        chai.request(app)\n            .post('/api/note/create')\n            .set('Accept', 'application/json')\n            .set('Authorization', `Bearer ${token}`)\n            .send(note)\n            .end((err, res) => {\n                expect(res.status).to.equal(201);\n                expect(res.body.data).to.include({\n                    id: 1\n                });\n                expect(res.body.data).to.have.keys('id', 'text', 'title', 'user_id', 'updatedAt', 'createdAt')\n                token = res.body.data.token;\n                done();\n            });\n    });\n    \n    it('It should get all notes', function(done){\n        // console.log(token)\n        chai.request(app)\n            .get('/api/note')\n            .set('Authorization', `Bearer ${token}`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(200);\n                expect(res.body.data).to.be.an('array')\n                expect(res.body.data).to.have.deep.keys('id', 'text', 'title', 'user_id', 'updatedAt', 'createdAt')\n                expect(res.body.data).to.have.deep.property({\n                    '[0].title': note.title,\n                    '[0].text': note.text,\n                    '[0].id': 0\n                });\n                token = res.body.data.token;\n                done();\n            })\n    });\n\n    it('It should not logout with blacklisted token', function(done){\n        // console.log(token)\n        chai.request(app)\n            .post('/api/user/logout')\n            .set('Authorization', `Bearer ${token}`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(400);\n                done();\n            })\n    });\n  \n    it('It should login', function(done){\n        // console.log(token)\n        chai.request(app)\n            .post('/api/user/login')\n            .send(user)\n            .end((err, res) => {\n                expect(res.status).to.equal(200);\n                expect(res.body.data).to.have.keys('token', 'username')\n                token = res.body.data.token;\n                done();\n            })\n    });\n    // it('It should get a particular book', (done) => {\n    //   const bookId = 1;\n    //   chai.request(app)\n    //     .get(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(200);\n    //       res.body.data.should.have.property('id');\n    //       res.body.data.should.have.property('title');\n    //       res.body.data.should.have.property('price');\n    //       res.body.data.should.have.property('description');\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not get a particular book with invalid id', (done) => {\n    //   const bookId = 8888;\n    //   chai.request(app)\n    //     .get(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(404);\n    //       res.body.should.have.property('message')\n    //                           .eql(`Cannot find book with the id ${bookId}`);\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not get a particular book with non-numeric id', (done) => {\n    //   const bookId = 'aaa';\n    //   chai.request(app)\n    //     .get(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(400);\n    //       res.body.should.have.property('message')\n    //                           .eql('Please input a valid numeric value');\n    //       done();\n    //     });\n    // });\n  \n    // it('It should update a book', (done) => {\n    //   const bookId = 1;\n    //   const updatedBook = {\n    //     id: bookId,\n    //     title: 'Updated Awesome book',\n    //     price: '$10.99',\n    //     description: 'We have updated the price'\n    //   };\n    //   chai.request(app)\n    //     .put(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .send(updatedBook)\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(200);\n    //       expect(res.body.data.id).equal(updatedBook.id);\n    //       expect(res.body.data.title).equal(updatedBook.title);\n    //       expect(res.body.data.price).equal(updatedBook.price);\n    //       expect(res.body.data.description).equal(updatedBook.description);\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not update a book with invalid id', (done) => {\n    //   const bookId = '9999';\n    //   const updatedBook = {\n    //     id: bookId,\n    //     title: 'Updated Awesome book again',\n    //     price: '$11.99',\n    //     description: 'We have updated the price'\n    //   };\n    //   chai.request(app)\n    //     .put(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .send(updatedBook)\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(404);\n    //       res.body.should.have.property('message')\n    //                           .eql(`Cannot find book with the id: ${bookId}`);\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not update a book with non-numeric id value', (done) => {\n    //   const bookId = 'ggg';\n    //   const updatedBook = {\n    //     id: bookId,\n    //     title: 'Updated Awesome book again',\n    //     price: '$11.99',\n    //     description: 'We have updated the price'\n    //   };\n    //   chai.request(app)\n    //     .put(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .send(updatedBook)\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(400);\n    //       res.body.should.have.property('message')\n    //                           .eql('Please input a valid numeric value');\n    //       done();\n    //     });\n    // });\n  \n  \n    // it('It should delete a book', (done) => {\n    //   const bookId = 1;\n    //   chai.request(app)\n    //     .delete(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(200);\n    //       expect(res.body.data).to.include({});\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not delete a book with invalid id', (done) => {\n    //   const bookId = 777;\n    //   chai.request(app)\n    //     .delete(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(404);\n    //       res.body.should.have.property('message')\n    //                           .eql(`Book with the id ${bookId} cannot be found`);\n    //       done();\n    //     });\n    // });\n  \n    // it('It should not delete a book with non-numeric id', (done) => {\n    //   const bookId = 'bbb';\n    //   chai.request(app)\n    //     .delete(`/api/v1/books/${bookId}`)\n    //     .set('Accept', 'application/json')\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(400);\n    //       res.body.should.have.property('message').eql('Please provide a numeric value');\n    //       done();\n    //     });\n    // });\n    \n  });"],"file":"note.js"}
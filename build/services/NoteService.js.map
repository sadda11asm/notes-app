{"version":3,"sources":["../../server/services/NoteService.js"],"names":["require","config","expiration_time","NoteService","new_note","next","database","User","findOne","where","username","user","Error","user_id","Note","create","db_note","console","log","findAll","notes","note_id","id","note","req","decoded","host","headers","url","baseUrl","params","sharing_token","jwt","sign","process","env","JWT_SHARING_SECRET","link","update","title","text","destroy"],"mappings":"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","sourcesContent":["import database from '../models';\nrequire('dotenv').config()\nconst expiration_time = 86400\nimport jwt from 'jsonwebtoken';\nrequire('dotenv').config()\n\n\n\n\nclass NoteService {\n    static async createNote(new_note, next) {\n        try {\n            const user = await database.User.findOne({\n                where: {username : new_note.username}\n            })\n            if (!user) {\n                next(new Error(\"Corrupted token and username\"), false)\n                return\n            }\n            new_note.user_id = user.user_id\n            const db_note = await database.Note.create(new_note);\n            next(null, false, db_note)\n        } catch (error) {\n            console.log(error)\n            next(error, false)\n        }\n    }\n\n    static async getNotes(username, next) {\n        try {\n            const user = await database.User.findOne({\n                where: {username : username}\n            })\n            if (!user) {\n                next(new Error(\"Corrupted token and username\"), false)\n                return\n            }\n            const notes = await database.Note.findAll({\n                where: {user_id: user.user_id}\n            });\n            next(null, false, notes)\n        } catch (error) {\n            console.log(error)\n            next(error, false)\n        }\n    }\n\n    static async getNote(note_id, next) {\n        try {\n            const note = await database.Note.findOne({\n                where: {id : note_id}\n            })\n            if (!note) {\n                next(new Error(\"No such file!\"), false)\n                return\n            }\n            next(null, false, note)\n        } catch (error) {\n            console.log(error)\n            next(error, false)\n        }\n    }\n\n    static async createLink(req, next) {\n        const username = req.decoded.username;\n        const host = req.headers.host;\n        const url = req.baseUrl;\n        const { id } = req.params;\n        try {\n            const user = await database.User.findOne({\n                where: {username : username}\n            })\n            if (!user) {\n                next(new Error(\"Corrupted token and username\"), true)\n                return\n            }\n            const note = await database.Note.findOne({\n                where: {id: id}\n            });\n            if (!note) {\n                next(new Error(\"No such note with the given id!\"), true)\n                return\n            }\n            if (note.user_id != user.user_id) {\n                next(new Error(\"You do not have rights to share this note!\"), true)\n                return\n            }\n            let sharing_token = jwt.sign({note_id: id},\n                process.env.JWT_SHARING_SECRET\n            );\n            console.log(sharing_token)\n            const link = `http://${host}${url}/${sharing_token}`\n            next(null, false, link)\n        } catch (error) {\n            console.log(error)\n            next(error, false)\n        }\n    }\n\n    static async editNote(username, id, new_note, next) {\n        try {\n            const user = await database.User.findOne({\n                where: {username : username}\n            })\n            if (!user) {\n                next(new Error(\"Corrupted token and username\"), true)\n                return\n            }\n            const note = await database.Note.findOne({\n                where: {id: id}\n            });\n            if (!note) {\n                next(new Error(\"No such note with the given id!\"), true)\n                return\n            }\n            if (note.user_id != user.user_id) {\n                next(new Error(\"You do not have rights to edit this note!\"), true)\n                return\n            }\n            await note.update({\n                title: new_note.title,\n                text: new_note.text\n            })\n            next(null, false, note)\n        } catch (error) {\n            console.log(error)\n            next(error, false)\n        }\n    }\n\n    static async deleteNote(username, id, next) {\n        try {\n            const user = await database.User.findOne({\n                where: {username : username}\n            })\n            if (!user) {\n                next(new Error(\"Corrupted token and username\"), true)\n                return\n            }\n            const note = await database.Note.findOne({\n                where: {id: id}\n            });\n            if (!note) {\n                next(new Error(\"No such note with the given id!\"), true)\n                return\n            }\n            if (note.user_id != user.user_id) {\n                next(new Error(\"You do not have rights to delete this note!\"), true)\n                return\n            }\n            await note.destroy()\n            next(null, false)\n        } catch (error) {\n            console.log(error)\n            next(error, false)\n        }\n    }\n    \n\n}\n\nexport default NoteService;"],"file":"NoteService.js"}
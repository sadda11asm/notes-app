{"version":3,"sources":["../../server/services/KeyService.js"],"names":["redis","require","JWT","EXPIRATION_TIME","config","get","sessionKey","KeyService","client","createClient","on","console","log","prototype","getAsync","set","user","deviceId","userKey","uuid","v4","issuedAt","Date","getTime","expiresAt","token","generate","key","id","setKey","setAsync","setExpiration","then","expireAsync","getToken","delAsync","module","exports"],"mappings":";;AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAjB;;AACA,IAAIE,eAAe,GAAGC,MAAM,CAACC,GAAP,CAAW,6BAAX,CAAtB;;AACA,IAAIC,UAAU,GAAGL,OAAO,CAAC,qBAAD,CAAxB;;AAEA,SAASM,UAAT,GAAsB;AACpB,OAAKC,MAAL,GAAcR,KAAK,CAACS,YAAN,CAAmBL,MAAM,CAACC,GAAP,CAAW,kBAAX,CAAnB,EACmBD,MAAM,CAACC,GAAP,CAAW,kBAAX,CADnB,CAAd;AAEA,OAAKG,MAAL,CAAYE,EAAZ,CAAe,SAAf,EAA0B,YAAW;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,GAFD;AAGAD,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,C,CAED;;;AACAL,UAAU,CAACM,SAAX,CAAqBR,GAArB,GAA2B,UAASC,UAAT,EAAqB;AAC9C,SAAO,KAAKE,MAAL,CAAYM,QAAZ,CAAqBR,UAArB,CAAP;AACD,CAFD,C,CAIA;;;AACAC,UAAU,CAACM,SAAX,CAAqBE,GAArB,GAA2B,UAASC,IAAT,EAAeC,QAAf,EAAyB;AAClD,MAAIC,OAAO,GAAGC,IAAI,CAACC,EAAL,EAAd;AACA,MAAIC,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAf;AACA,MAAIC,SAAS,GAAGH,QAAQ,GAAIlB,eAAe,GAAG,IAA9C;AAEA,MAAIsB,KAAK,GAAGvB,GAAG,CAACwB,QAAJ,CAAaV,IAAb,EAAmBC,QAAnB,EAA6BC,OAA7B,EAAsCG,QAAtC,EAAgDG,SAAhD,CAAZ;AACA,MAAIG,GAAG,GAAGrB,UAAU,CAACU,IAAI,CAACY,EAAN,EAAUX,QAAV,EAAoBI,QAApB,CAApB;AAEA,MAAIQ,MAAM,GAAG,KAAKrB,MAAL,CAAYsB,QAAZ,CAAqBH,GAArB,EAA0BT,OAA1B,CAAb;AACA,MAAIa,aAAa,GAAGF,MAAM,CAACG,IAAP,CAAY,KAAKxB,MAAL,CAAYyB,WAAZ,CAAwBN,GAAxB,EACAxB,eADA,CAAZ,CAApB;AAEA,MAAI+B,QAAQ,GAAGH,aAAa,CAACC,IAAd,CAAmB,YAAW;AAC3C,WAAOP,KAAP;AACD,GAFc,CAAf;AAIA,SAAOS,QAAP;AACD,CAhBD,C,CAkBA;;;AACA3B,UAAU,CAACM,SAAX,aAA8B,UAASP,UAAT,EAAqB;AACjD,SAAO,KAAKE,MAAL,CAAY2B,QAAZ,CAAqB7B,UAArB,CAAP;AACD,CAFD;;AAIA8B,MAAM,CAACC,OAAP,GAAiB,IAAI9B,UAAJ,EAAjB","sourcesContent":["var redis = require('redis');\nvar JWT = require('../utils/jwt');\nvar EXPIRATION_TIME = config.get('key_service:expires_seconds');\nvar sessionKey = require('../utils/sessionKey');\n\nfunction KeyService() {\n  this.client = redis.createClient(config.get('key_service:port'),\n                                   config.get('key_service:host'));\n  this.client.on('connect', function() {\n    console.log('Redis connected.');\n  });\n  console.log('Connecting to Redis...');\n}\n\n// Retrieve a JWT user key\nKeyService.prototype.get = function(sessionKey) {\n  return this.client.getAsync(sessionKey);\n};\n\n// Generate and store a new JWT user key\nKeyService.prototype.set = function(user, deviceId) {\n  var userKey = uuid.v4();\n  var issuedAt = new Date().getTime();\n  var expiresAt = issuedAt + (EXPIRATION_TIME * 1000);\n\n  var token = JWT.generate(user, deviceId, userKey, issuedAt, expiresAt);\n  var key = sessionKey(user.id, deviceId, issuedAt);\n\n  var setKey = this.client.setAsync(key, userKey);\n  var setExpiration = setKey.then(this.client.expireAsync(key,\n                                  EXPIRATION_TIME));\n  var getToken = setExpiration.then(function() {\n    return token;\n  });\n\n  return getToken;\n};\n\n// Manually remove a JWT user key\nKeyService.prototype.delete = function(sessionKey) {\n  return this.client.delAsync(sessionKey);\n};\n\nmodule.exports = new KeyService();"],"file":"KeyService.js"}